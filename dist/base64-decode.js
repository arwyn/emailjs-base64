'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var OUTPUT_STRING = exports.OUTPUT_STRING = 'OUTPUT_STRING';
var OUTPUT_TYPED_ARRAY = exports.OUTPUT_TYPED_ARRAY = 'OUTPUT_TYPED_ARRAY';

exports.default = function (base64Str) {
  var outputEncoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : OUTPUT_STRING;
  return outputEncoding === OUTPUT_STRING ? decode(base64Str) : String.fromCharCode.apply(null, decode(base64Str));
};

function decode(base64Str) {
  var iOut = 0;
  var arr = new Uint8Array(Math.ceil(base64Str.length * 3 / 4));

  for (var i = 0, len = base64Str.length, validBits = 0, bitsSoFar = 0; i < len; i++) {
    var bits = void 0;
    var c = base64Str.charCodeAt(i);
    if (c >= 0x41 && c <= 0x5a) {
      // [A-Z]
      bits = c - 0x41;
    } else if (c >= 0x61 && c <= 0x7a) {
      // [a-z]
      bits = c - 0x61 + 0x1a;
    } else if (c >= 0x30 && c <= 0x39) {
      // [0-9]
      bits = c - 0x30 + 0x34;
    } else if (c === 0x2b) {
      // +
      bits = 0x3e;
    } else if (c === 0x2f) {
      // /
      bits = 0x3f;
    } else if (c === 0x3d) {
      // =
      validBits = 0;
      continue;
    } else {
      // ignore all other characters!
      continue;
    }
    bitsSoFar = bitsSoFar << 6 | bits;
    validBits += 6;
    if (validBits >= 8) {
      validBits -= 8;
      arr[iOut++] = bitsSoFar >> validBits;
      if (validBits === 2) {
        bitsSoFar &= 0x03;
      } else if (validBits === 4) {
        bitsSoFar &= 0x0f;
      }
    }
  }

  return iOut < arr.length ? arr.subarray(0, iOut) : arr;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iYXNlNjQtZGVjb2RlLmpzIl0sIm5hbWVzIjpbIk9VVFBVVF9TVFJJTkciLCJPVVRQVVRfVFlQRURfQVJSQVkiLCJiYXNlNjRTdHIiLCJvdXRwdXRFbmNvZGluZyIsImRlY29kZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiaU91dCIsImFyciIsIlVpbnQ4QXJyYXkiLCJNYXRoIiwiY2VpbCIsImxlbmd0aCIsImkiLCJsZW4iLCJ2YWxpZEJpdHMiLCJiaXRzU29GYXIiLCJiaXRzIiwiYyIsImNoYXJDb2RlQXQiLCJzdWJhcnJheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxJQUFNQSx3Q0FBZ0IsZUFBdEI7QUFDQSxJQUFNQyxrREFBcUIsb0JBQTNCOztrQkFFUSxVQUFDQyxTQUFEO0FBQUEsTUFBWUMsY0FBWix1RUFBNkJILGFBQTdCO0FBQUEsU0FDYkcsbUJBQW1CSCxhQUFuQixHQUFtQ0ksT0FBT0YsU0FBUCxDQUFuQyxHQUF1REcsT0FBT0MsWUFBUCxDQUFvQkMsS0FBcEIsQ0FBMEIsSUFBMUIsRUFBZ0NILE9BQU9GLFNBQVAsQ0FBaEMsQ0FEMUM7QUFBQSxDOztBQUdmLFNBQVNFLE1BQVQsQ0FBaUJGLFNBQWpCLEVBQTRCO0FBQzFCLE1BQUlNLE9BQU8sQ0FBWDtBQUNBLE1BQU1DLE1BQU0sSUFBSUMsVUFBSixDQUFlQyxLQUFLQyxJQUFMLENBQVVWLFVBQVVXLE1BQVYsR0FBbUIsQ0FBbkIsR0FBdUIsQ0FBakMsQ0FBZixDQUFaOztBQUVBLE9BQUssSUFBSUMsSUFBSSxDQUFSLEVBQVdDLE1BQU1iLFVBQVVXLE1BQTNCLEVBQW1DRyxZQUFZLENBQS9DLEVBQWtEQyxZQUFZLENBQW5FLEVBQXNFSCxJQUFJQyxHQUExRSxFQUErRUQsR0FBL0UsRUFBb0Y7QUFDbEYsUUFBSUksYUFBSjtBQUNBLFFBQU1DLElBQUlqQixVQUFVa0IsVUFBVixDQUFxQk4sQ0FBckIsQ0FBVjtBQUNBLFFBQUlLLEtBQUssSUFBTCxJQUFhQSxLQUFLLElBQXRCLEVBQTRCO0FBQUU7QUFDNUJELGFBQU9DLElBQUksSUFBWDtBQUNELEtBRkQsTUFFTyxJQUFJQSxLQUFLLElBQUwsSUFBYUEsS0FBSyxJQUF0QixFQUE0QjtBQUFFO0FBQ25DRCxhQUFPQyxJQUFJLElBQUosR0FBVyxJQUFsQjtBQUNELEtBRk0sTUFFQSxJQUFJQSxLQUFLLElBQUwsSUFBYUEsS0FBSyxJQUF0QixFQUE0QjtBQUFFO0FBQ25DRCxhQUFPQyxJQUFJLElBQUosR0FBVyxJQUFsQjtBQUNELEtBRk0sTUFFQSxJQUFJQSxNQUFNLElBQVYsRUFBZ0I7QUFBRTtBQUN2QkQsYUFBTyxJQUFQO0FBQ0QsS0FGTSxNQUVBLElBQUlDLE1BQU0sSUFBVixFQUFnQjtBQUFFO0FBQ3ZCRCxhQUFPLElBQVA7QUFDRCxLQUZNLE1BRUEsSUFBSUMsTUFBTSxJQUFWLEVBQWdCO0FBQUU7QUFDdkJILGtCQUFZLENBQVo7QUFDQTtBQUNELEtBSE0sTUFHQTtBQUNMO0FBQ0E7QUFDRDtBQUNEQyxnQkFBYUEsYUFBYSxDQUFkLEdBQW1CQyxJQUEvQjtBQUNBRixpQkFBYSxDQUFiO0FBQ0EsUUFBSUEsYUFBYSxDQUFqQixFQUFvQjtBQUNsQkEsbUJBQWEsQ0FBYjtBQUNBUCxVQUFJRCxNQUFKLElBQWNTLGFBQWFELFNBQTNCO0FBQ0EsVUFBSUEsY0FBYyxDQUFsQixFQUFxQjtBQUNuQkMscUJBQWEsSUFBYjtBQUNELE9BRkQsTUFFTyxJQUFJRCxjQUFjLENBQWxCLEVBQXFCO0FBQzFCQyxxQkFBYSxJQUFiO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQVFULE9BQU9DLElBQUlJLE1BQVosR0FBc0JKLElBQUlZLFFBQUosQ0FBYSxDQUFiLEVBQWdCYixJQUFoQixDQUF0QixHQUE4Q0MsR0FBckQ7QUFDRCIsImZpbGUiOiJiYXNlNjQtZGVjb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IE9VVFBVVF9TVFJJTkcgPSAnT1VUUFVUX1NUUklORydcbmV4cG9ydCBjb25zdCBPVVRQVVRfVFlQRURfQVJSQVkgPSAnT1VUUFVUX1RZUEVEX0FSUkFZJ1xuXG5leHBvcnQgZGVmYXVsdCAoYmFzZTY0U3RyLCBvdXRwdXRFbmNvZGluZyA9IE9VVFBVVF9TVFJJTkcpID0+XG4gIG91dHB1dEVuY29kaW5nID09PSBPVVRQVVRfU1RSSU5HID8gZGVjb2RlKGJhc2U2NFN0cikgOiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGRlY29kZShiYXNlNjRTdHIpKVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJhc2U2NFN0cikge1xuICBsZXQgaU91dCA9IDBcbiAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoTWF0aC5jZWlsKGJhc2U2NFN0ci5sZW5ndGggKiAzIC8gNCkpXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGJhc2U2NFN0ci5sZW5ndGgsIHZhbGlkQml0cyA9IDAsIGJpdHNTb0ZhciA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGxldCBiaXRzXG4gICAgY29uc3QgYyA9IGJhc2U2NFN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaWYgKGMgPj0gMHg0MSAmJiBjIDw9IDB4NWEpIHsgLy8gW0EtWl1cbiAgICAgIGJpdHMgPSBjIC0gMHg0MVxuICAgIH0gZWxzZSBpZiAoYyA+PSAweDYxICYmIGMgPD0gMHg3YSkgeyAvLyBbYS16XVxuICAgICAgYml0cyA9IGMgLSAweDYxICsgMHgxYVxuICAgIH0gZWxzZSBpZiAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgeyAvLyBbMC05XVxuICAgICAgYml0cyA9IGMgLSAweDMwICsgMHgzNFxuICAgIH0gZWxzZSBpZiAoYyA9PT0gMHgyYikgeyAvLyArXG4gICAgICBiaXRzID0gMHgzZVxuICAgIH0gZWxzZSBpZiAoYyA9PT0gMHgyZikgeyAvLyAvXG4gICAgICBiaXRzID0gMHgzZlxuICAgIH0gZWxzZSBpZiAoYyA9PT0gMHgzZCkgeyAvLyA9XG4gICAgICB2YWxpZEJpdHMgPSAwXG4gICAgICBjb250aW51ZVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZ25vcmUgYWxsIG90aGVyIGNoYXJhY3RlcnMhXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBiaXRzU29GYXIgPSAoYml0c1NvRmFyIDw8IDYpIHwgYml0c1xuICAgIHZhbGlkQml0cyArPSA2XG4gICAgaWYgKHZhbGlkQml0cyA+PSA4KSB7XG4gICAgICB2YWxpZEJpdHMgLT0gOFxuICAgICAgYXJyW2lPdXQrK10gPSBiaXRzU29GYXIgPj4gdmFsaWRCaXRzXG4gICAgICBpZiAodmFsaWRCaXRzID09PSAyKSB7XG4gICAgICAgIGJpdHNTb0ZhciAmPSAweDAzXG4gICAgICB9IGVsc2UgaWYgKHZhbGlkQml0cyA9PT0gNCkge1xuICAgICAgICBiaXRzU29GYXIgJj0gMHgwZlxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoaU91dCA8IGFyci5sZW5ndGgpID8gYXJyLnN1YmFycmF5KDAsIGlPdXQpIDogYXJyXG59XG4iXX0=