'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var OUTPUT_STRING = exports.OUTPUT_STRING = 'OUTPUT_STRING';
var OUTPUT_TYPED_ARRAY = exports.OUTPUT_TYPED_ARRAY = 'OUTPUT_TYPED_ARRAY';

exports.default = function (base64Str) {
  var outputEncoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : OUTPUT_STRING;
  return outputEncoding === OUTPUT_STRING ? decodeURIComponent(escape(String.fromCharCode.apply(null, decode(base64Str)))) : decode(base64Str);
};

function decode(base64Str) {
  var iOut = 0;
  var arr = new Uint8Array(Math.ceil(base64Str.length * 3 / 4));

  for (var i = 0, len = base64Str.length, validBits = 0, bitsSoFar = 0; i < len; i++) {
    var bits = void 0;
    var c = base64Str.charCodeAt(i);
    if (c >= 0x41 && c <= 0x5a) {
      // [A-Z]
      bits = c - 0x41;
    } else if (c >= 0x61 && c <= 0x7a) {
      // [a-z]
      bits = c - 0x61 + 0x1a;
    } else if (c >= 0x30 && c <= 0x39) {
      // [0-9]
      bits = c - 0x30 + 0x34;
    } else if (c === 0x2b) {
      // +
      bits = 0x3e;
    } else if (c === 0x2f) {
      // /
      bits = 0x3f;
    } else if (c === 0x3d) {
      // =
      validBits = 0;
      continue;
    } else {
      // ignore all other characters!
      continue;
    }
    bitsSoFar = bitsSoFar << 6 | bits;
    validBits += 6;
    if (validBits >= 8) {
      validBits -= 8;
      arr[iOut++] = bitsSoFar >> validBits;
      if (validBits === 2) {
        bitsSoFar &= 0x03;
      } else if (validBits === 4) {
        bitsSoFar &= 0x0f;
      }
    }
  }

  return iOut < arr.length ? arr.subarray(0, iOut) : arr;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iYXNlNjQtZGVjb2RlLmpzIl0sIm5hbWVzIjpbIk9VVFBVVF9TVFJJTkciLCJPVVRQVVRfVFlQRURfQVJSQVkiLCJiYXNlNjRTdHIiLCJvdXRwdXRFbmNvZGluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlIiwiaU91dCIsImFyciIsIlVpbnQ4QXJyYXkiLCJNYXRoIiwiY2VpbCIsImxlbmd0aCIsImkiLCJsZW4iLCJ2YWxpZEJpdHMiLCJiaXRzU29GYXIiLCJiaXRzIiwiYyIsImNoYXJDb2RlQXQiLCJzdWJhcnJheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxJQUFNQSx3Q0FBZ0IsZUFBdEI7QUFDQSxJQUFNQyxrREFBcUIsb0JBQTNCOztrQkFFUSxVQUFDQyxTQUFEO0FBQUEsTUFBWUMsY0FBWix1RUFBNkJILGFBQTdCO0FBQUEsU0FDWkcsbUJBQW1CSCxhQUFwQixHQUFxQ0ksbUJBQW1CQyxPQUFPQyxPQUFPQyxZQUFQLENBQW9CQyxLQUFwQixDQUEwQixJQUExQixFQUFnQ0MsT0FBT1AsU0FBUCxDQUFoQyxDQUFQLENBQW5CLENBQXJDLEdBQXNITyxPQUFPUCxTQUFQLENBRHpHO0FBQUEsQzs7QUFHZixTQUFTTyxNQUFULENBQWlCUCxTQUFqQixFQUE0QjtBQUMxQixNQUFJUSxPQUFPLENBQVg7QUFDQSxNQUFNQyxNQUFNLElBQUlDLFVBQUosQ0FBZUMsS0FBS0MsSUFBTCxDQUFVWixVQUFVYSxNQUFWLEdBQW1CLENBQW5CLEdBQXVCLENBQWpDLENBQWYsQ0FBWjs7QUFFQSxPQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxNQUFNZixVQUFVYSxNQUEzQixFQUFtQ0csWUFBWSxDQUEvQyxFQUFrREMsWUFBWSxDQUFuRSxFQUFzRUgsSUFBSUMsR0FBMUUsRUFBK0VELEdBQS9FLEVBQW9GO0FBQ2xGLFFBQUlJLGFBQUo7QUFDQSxRQUFNQyxJQUFJbkIsVUFBVW9CLFVBQVYsQ0FBcUJOLENBQXJCLENBQVY7QUFDQSxRQUFJSyxLQUFLLElBQUwsSUFBYUEsS0FBSyxJQUF0QixFQUE0QjtBQUFFO0FBQzVCRCxhQUFPQyxJQUFJLElBQVg7QUFDRCxLQUZELE1BRU8sSUFBSUEsS0FBSyxJQUFMLElBQWFBLEtBQUssSUFBdEIsRUFBNEI7QUFBRTtBQUNuQ0QsYUFBT0MsSUFBSSxJQUFKLEdBQVcsSUFBbEI7QUFDRCxLQUZNLE1BRUEsSUFBSUEsS0FBSyxJQUFMLElBQWFBLEtBQUssSUFBdEIsRUFBNEI7QUFBRTtBQUNuQ0QsYUFBT0MsSUFBSSxJQUFKLEdBQVcsSUFBbEI7QUFDRCxLQUZNLE1BRUEsSUFBSUEsTUFBTSxJQUFWLEVBQWdCO0FBQUU7QUFDdkJELGFBQU8sSUFBUDtBQUNELEtBRk0sTUFFQSxJQUFJQyxNQUFNLElBQVYsRUFBZ0I7QUFBRTtBQUN2QkQsYUFBTyxJQUFQO0FBQ0QsS0FGTSxNQUVBLElBQUlDLE1BQU0sSUFBVixFQUFnQjtBQUFFO0FBQ3ZCSCxrQkFBWSxDQUFaO0FBQ0E7QUFDRCxLQUhNLE1BR0E7QUFDTDtBQUNBO0FBQ0Q7QUFDREMsZ0JBQWFBLGFBQWEsQ0FBZCxHQUFtQkMsSUFBL0I7QUFDQUYsaUJBQWEsQ0FBYjtBQUNBLFFBQUlBLGFBQWEsQ0FBakIsRUFBb0I7QUFDbEJBLG1CQUFhLENBQWI7QUFDQVAsVUFBSUQsTUFBSixJQUFjUyxhQUFhRCxTQUEzQjtBQUNBLFVBQUlBLGNBQWMsQ0FBbEIsRUFBcUI7QUFDbkJDLHFCQUFhLElBQWI7QUFDRCxPQUZELE1BRU8sSUFBSUQsY0FBYyxDQUFsQixFQUFxQjtBQUMxQkMscUJBQWEsSUFBYjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFRVCxPQUFPQyxJQUFJSSxNQUFaLEdBQXNCSixJQUFJWSxRQUFKLENBQWEsQ0FBYixFQUFnQmIsSUFBaEIsQ0FBdEIsR0FBOENDLEdBQXJEO0FBQ0QiLCJmaWxlIjoiYmFzZTY0LWRlY29kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBPVVRQVVRfU1RSSU5HID0gJ09VVFBVVF9TVFJJTkcnXG5leHBvcnQgY29uc3QgT1VUUFVUX1RZUEVEX0FSUkFZID0gJ09VVFBVVF9UWVBFRF9BUlJBWSdcblxuZXhwb3J0IGRlZmF1bHQgKGJhc2U2NFN0ciwgb3V0cHV0RW5jb2RpbmcgPSBPVVRQVVRfU1RSSU5HKSA9PlxuICAob3V0cHV0RW5jb2RpbmcgPT09IE9VVFBVVF9TVFJJTkcpID8gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGRlY29kZShiYXNlNjRTdHIpKSkpIDogZGVjb2RlKGJhc2U2NFN0cilcblxuZnVuY3Rpb24gZGVjb2RlIChiYXNlNjRTdHIpIHtcbiAgbGV0IGlPdXQgPSAwXG4gIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbChiYXNlNjRTdHIubGVuZ3RoICogMyAvIDQpKVxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBiYXNlNjRTdHIubGVuZ3RoLCB2YWxpZEJpdHMgPSAwLCBiaXRzU29GYXIgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBsZXQgYml0c1xuICAgIGNvbnN0IGMgPSBiYXNlNjRTdHIuY2hhckNvZGVBdChpKVxuICAgIGlmIChjID49IDB4NDEgJiYgYyA8PSAweDVhKSB7IC8vIFtBLVpdXG4gICAgICBiaXRzID0gYyAtIDB4NDFcbiAgICB9IGVsc2UgaWYgKGMgPj0gMHg2MSAmJiBjIDw9IDB4N2EpIHsgLy8gW2Etel1cbiAgICAgIGJpdHMgPSBjIC0gMHg2MSArIDB4MWFcbiAgICB9IGVsc2UgaWYgKGMgPj0gMHgzMCAmJiBjIDw9IDB4MzkpIHsgLy8gWzAtOV1cbiAgICAgIGJpdHMgPSBjIC0gMHgzMCArIDB4MzRcbiAgICB9IGVsc2UgaWYgKGMgPT09IDB4MmIpIHsgLy8gK1xuICAgICAgYml0cyA9IDB4M2VcbiAgICB9IGVsc2UgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgYml0cyA9IDB4M2ZcbiAgICB9IGVsc2UgaWYgKGMgPT09IDB4M2QpIHsgLy8gPVxuICAgICAgdmFsaWRCaXRzID0gMFxuICAgICAgY29udGludWVcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWdub3JlIGFsbCBvdGhlciBjaGFyYWN0ZXJzIVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgYml0c1NvRmFyID0gKGJpdHNTb0ZhciA8PCA2KSB8IGJpdHNcbiAgICB2YWxpZEJpdHMgKz0gNlxuICAgIGlmICh2YWxpZEJpdHMgPj0gOCkge1xuICAgICAgdmFsaWRCaXRzIC09IDhcbiAgICAgIGFycltpT3V0KytdID0gYml0c1NvRmFyID4+IHZhbGlkQml0c1xuICAgICAgaWYgKHZhbGlkQml0cyA9PT0gMikge1xuICAgICAgICBiaXRzU29GYXIgJj0gMHgwM1xuICAgICAgfSBlbHNlIGlmICh2YWxpZEJpdHMgPT09IDQpIHtcbiAgICAgICAgYml0c1NvRmFyICY9IDB4MGZcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGlPdXQgPCBhcnIubGVuZ3RoKSA/IGFyci5zdWJhcnJheSgwLCBpT3V0KSA6IGFyclxufVxuIl19