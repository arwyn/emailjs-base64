'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
var MAX_CHUNK_LENGTH = 16383; // must be multiple of 3

var tripletToBase64 = function tripletToBase64(num) {
  return LOOKUP[num >> 18 & 0x3F] + LOOKUP[num >> 12 & 0x3F] + LOOKUP[num >> 6 & 0x3F] + LOOKUP[num & 0x3F];
};

function encodeChunk(uint8, start, end) {
  var output = '';
  for (var i = start; i < end; i += 3) {
    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);
  }
  return output;
}

function str2arr(str) {
  var buf = new ArrayBuffer(str.length);
  var bufView = new Uint8Array(buf);
  for (var i = 0, strLen = str.length; i < strLen; i++) {
    bufView[i] = str.charCodeAt(i);
  }
  return bufView;
}

function encode(data) {
  var len = data.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {
    output += encodeChunk(data, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    var tmp = data[len - 1];
    output += LOOKUP[tmp >> 2];
    output += LOOKUP[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    var _tmp = (data[len - 2] << 8) + data[len - 1];
    output += LOOKUP[_tmp >> 10];
    output += LOOKUP[_tmp >> 4 & 0x3F];
    output += LOOKUP[_tmp << 2 & 0x3F];
    output += '=';
  }

  return output;
}

exports.default = function (data) {
  return typeof data === 'string' ? encode(str2arr(unescape(encodeURIComponent(data)))) : encode(data);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iYXNlNjQtZW5jb2RlLmpzIl0sIm5hbWVzIjpbIkxPT0tVUCIsInNwbGl0IiwiTUFYX0NIVU5LX0xFTkdUSCIsInRyaXBsZXRUb0Jhc2U2NCIsIm51bSIsImVuY29kZUNodW5rIiwidWludDgiLCJzdGFydCIsImVuZCIsIm91dHB1dCIsImkiLCJzdHIyYXJyIiwic3RyIiwiYnVmIiwiQXJyYXlCdWZmZXIiLCJsZW5ndGgiLCJidWZWaWV3IiwiVWludDhBcnJheSIsInN0ckxlbiIsImNoYXJDb2RlQXQiLCJlbmNvZGUiLCJkYXRhIiwibGVuIiwiZXh0cmFCeXRlcyIsImxlbjIiLCJ0bXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFNQSxTQUFTLG1FQUFtRUMsS0FBbkUsQ0FBeUUsRUFBekUsQ0FBZjtBQUNBLElBQU1DLG1CQUFtQixLQUF6QixDLENBQStCOztBQUUvQixJQUFNQyxrQkFBa0IsU0FBbEJBLGVBQWtCO0FBQUEsU0FBT0gsT0FBT0ksT0FBTyxFQUFQLEdBQVksSUFBbkIsSUFBMkJKLE9BQU9JLE9BQU8sRUFBUCxHQUFZLElBQW5CLENBQTNCLEdBQXNESixPQUFPSSxPQUFPLENBQVAsR0FBVyxJQUFsQixDQUF0RCxHQUFnRkosT0FBT0ksTUFBTSxJQUFiLENBQXZGO0FBQUEsQ0FBeEI7O0FBRUEsU0FBU0MsV0FBVCxDQUFzQkMsS0FBdEIsRUFBNkJDLEtBQTdCLEVBQW9DQyxHQUFwQyxFQUF5QztBQUN2QyxNQUFJQyxTQUFTLEVBQWI7QUFDQSxPQUFLLElBQUlDLElBQUlILEtBQWIsRUFBb0JHLElBQUlGLEdBQXhCLEVBQTZCRSxLQUFLLENBQWxDLEVBQXFDO0FBQ25DRCxjQUFVTixnQkFBZ0IsQ0FBQ0csTUFBTUksQ0FBTixLQUFZLEVBQWIsS0FBb0JKLE1BQU1JLElBQUksQ0FBVixLQUFnQixDQUFwQyxJQUEwQ0osTUFBTUksSUFBSSxDQUFWLENBQTFELENBQVY7QUFDRDtBQUNELFNBQU9ELE1BQVA7QUFDRDs7QUFFRCxTQUFTRSxPQUFULENBQWtCQyxHQUFsQixFQUF1QjtBQUNyQixNQUFNQyxNQUFNLElBQUlDLFdBQUosQ0FBZ0JGLElBQUlHLE1BQXBCLENBQVo7QUFDQSxNQUFNQyxVQUFVLElBQUlDLFVBQUosQ0FBZUosR0FBZixDQUFoQjtBQUNBLE9BQUssSUFBSUgsSUFBSSxDQUFSLEVBQVdRLFNBQVNOLElBQUlHLE1BQTdCLEVBQXFDTCxJQUFJUSxNQUF6QyxFQUFpRFIsR0FBakQsRUFBc0Q7QUFDcERNLFlBQVFOLENBQVIsSUFBYUUsSUFBSU8sVUFBSixDQUFlVCxDQUFmLENBQWI7QUFDRDtBQUNELFNBQU9NLE9BQVA7QUFDRDs7QUFFRCxTQUFTSSxNQUFULENBQWlCQyxJQUFqQixFQUF1QjtBQUNyQixNQUFNQyxNQUFNRCxLQUFLTixNQUFqQjtBQUNBLE1BQU1RLGFBQWFELE1BQU0sQ0FBekIsQ0FGcUIsQ0FFTTtBQUMzQixNQUFJYixTQUFTLEVBQWI7O0FBRUE7QUFDQSxPQUFLLElBQUlDLElBQUksQ0FBUixFQUFXYyxPQUFPRixNQUFNQyxVQUE3QixFQUF5Q2IsSUFBSWMsSUFBN0MsRUFBbURkLEtBQUtSLGdCQUF4RCxFQUEwRTtBQUN4RU8sY0FBVUosWUFBWWdCLElBQVosRUFBa0JYLENBQWxCLEVBQXNCQSxJQUFJUixnQkFBTCxHQUF5QnNCLElBQXpCLEdBQWdDQSxJQUFoQyxHQUF3Q2QsSUFBSVIsZ0JBQWpFLENBQVY7QUFDRDs7QUFFRDtBQUNBLE1BQUlxQixlQUFlLENBQW5CLEVBQXNCO0FBQ3BCLFFBQU1FLE1BQU1KLEtBQUtDLE1BQU0sQ0FBWCxDQUFaO0FBQ0FiLGNBQVVULE9BQU95QixPQUFPLENBQWQsQ0FBVjtBQUNBaEIsY0FBVVQsT0FBUXlCLE9BQU8sQ0FBUixHQUFhLElBQXBCLENBQVY7QUFDQWhCLGNBQVUsSUFBVjtBQUNELEdBTEQsTUFLTyxJQUFJYyxlQUFlLENBQW5CLEVBQXNCO0FBQzNCLFFBQU1FLE9BQU0sQ0FBQ0osS0FBS0MsTUFBTSxDQUFYLEtBQWlCLENBQWxCLElBQXdCRCxLQUFLQyxNQUFNLENBQVgsQ0FBcEM7QUFDQWIsY0FBVVQsT0FBT3lCLFFBQU8sRUFBZCxDQUFWO0FBQ0FoQixjQUFVVCxPQUFReUIsUUFBTyxDQUFSLEdBQWEsSUFBcEIsQ0FBVjtBQUNBaEIsY0FBVVQsT0FBUXlCLFFBQU8sQ0FBUixHQUFhLElBQXBCLENBQVY7QUFDQWhCLGNBQVUsR0FBVjtBQUNEOztBQUVELFNBQU9BLE1BQVA7QUFDRDs7a0JBRWM7QUFBQSxTQUFRLE9BQU9ZLElBQVAsS0FBZ0IsUUFBaEIsR0FBMkJELE9BQU9ULFFBQVFlLFNBQVNDLG1CQUFtQk4sSUFBbkIsQ0FBVCxDQUFSLENBQVAsQ0FBM0IsR0FBaUZELE9BQU9DLElBQVAsQ0FBekY7QUFBQSxDIiwiZmlsZSI6ImJhc2U2NC1lbmNvZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBMT09LVVAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycuc3BsaXQoJycpXG5jb25zdCBNQVhfQ0hVTktfTEVOR1RIID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbmNvbnN0IHRyaXBsZXRUb0Jhc2U2NCA9IG51bSA9PiBMT09LVVBbbnVtID4+IDE4ICYgMHgzRl0gKyBMT09LVVBbbnVtID4+IDEyICYgMHgzRl0gKyBMT09LVVBbbnVtID4+IDYgJiAweDNGXSArIExPT0tVUFtudW0gJiAweDNGXVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IG91dHB1dCA9ICcnXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgb3V0cHV0ICs9IHRyaXBsZXRUb0Jhc2U2NCgodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pKVxuICB9XG4gIHJldHVybiBvdXRwdXRcbn1cblxuZnVuY3Rpb24gc3RyMmFyciAoc3RyKSB7XG4gIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihzdHIubGVuZ3RoKVxuICBjb25zdCBidWZWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICBmb3IgKHZhciBpID0gMCwgc3RyTGVuID0gc3RyLmxlbmd0aDsgaSA8IHN0ckxlbjsgaSsrKSB7XG4gICAgYnVmVmlld1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gIH1cbiAgcmV0dXJuIGJ1ZlZpZXdcbn1cblxuZnVuY3Rpb24gZW5jb2RlIChkYXRhKSB7XG4gIGNvbnN0IGxlbiA9IGRhdGEubGVuZ3RoXG4gIGNvbnN0IGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIGxldCBvdXRwdXQgPSAnJ1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yIChsZXQgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBNQVhfQ0hVTktfTEVOR1RIKSB7XG4gICAgb3V0cHV0ICs9IGVuY29kZUNodW5rKGRhdGEsIGksIChpICsgTUFYX0NIVU5LX0xFTkdUSCkgPiBsZW4yID8gbGVuMiA6IChpICsgTUFYX0NIVU5LX0xFTkdUSCkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgY29uc3QgdG1wID0gZGF0YVtsZW4gLSAxXVxuICAgIG91dHB1dCArPSBMT09LVVBbdG1wID4+IDJdXG4gICAgb3V0cHV0ICs9IExPT0tVUFsodG1wIDw8IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz09J1xuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICBjb25zdCB0bXAgPSAoZGF0YVtsZW4gLSAyXSA8PCA4KSArIChkYXRhW2xlbiAtIDFdKVxuICAgIG91dHB1dCArPSBMT09LVVBbdG1wID4+IDEwXVxuICAgIG91dHB1dCArPSBMT09LVVBbKHRtcCA+PiA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9IExPT0tVUFsodG1wIDw8IDIpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz0nXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRhdGEgPT4gdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnID8gZW5jb2RlKHN0cjJhcnIodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGRhdGEpKSkpIDogZW5jb2RlKGRhdGEpXG4iXX0=