'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (uint8) {
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {
    output += encodeChunk(uint8, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    var tmp = uint8[len - 1];
    output += LOOKUP[tmp >> 2];
    output += LOOKUP[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    var _tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += LOOKUP[_tmp >> 10];
    output += LOOKUP[_tmp >> 4 & 0x3F];
    output += LOOKUP[_tmp << 2 & 0x3F];
    output += '=';
  }

  return output;
};

var LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
var MAX_CHUNK_LENGTH = 16383; // must be multiple of 3

var tripletToBase64 = function tripletToBase64(num) {
  return LOOKUP[num >> 18 & 0x3F] + LOOKUP[num >> 12 & 0x3F] + LOOKUP[num >> 6 & 0x3F] + LOOKUP[num & 0x3F];
};

function encodeChunk(uint8, start, end) {
  var output = '';
  for (var i = start; i < end; i += 3) {
    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);
  }
  return output;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iYXNlNjQtZW5jb2RlLmpzIl0sIm5hbWVzIjpbInVpbnQ4IiwibGVuIiwibGVuZ3RoIiwiZXh0cmFCeXRlcyIsIm91dHB1dCIsImkiLCJsZW4yIiwiTUFYX0NIVU5LX0xFTkdUSCIsImVuY29kZUNodW5rIiwidG1wIiwiTE9PS1VQIiwic3BsaXQiLCJ0cmlwbGV0VG9CYXNlNjQiLCJudW0iLCJzdGFydCIsImVuZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2tCQWFlLFVBQVVBLEtBQVYsRUFBaUI7QUFDOUIsTUFBTUMsTUFBTUQsTUFBTUUsTUFBbEI7QUFDQSxNQUFNQyxhQUFhRixNQUFNLENBQXpCLENBRjhCLENBRUg7QUFDM0IsTUFBSUcsU0FBUyxFQUFiOztBQUVBO0FBQ0EsT0FBSyxJQUFJQyxJQUFJLENBQVIsRUFBV0MsT0FBT0wsTUFBTUUsVUFBN0IsRUFBeUNFLElBQUlDLElBQTdDLEVBQW1ERCxLQUFLRSxnQkFBeEQsRUFBMEU7QUFDeEVILGNBQVVJLFlBQVlSLEtBQVosRUFBbUJLLENBQW5CLEVBQXVCQSxJQUFJRSxnQkFBTCxHQUF5QkQsSUFBekIsR0FBZ0NBLElBQWhDLEdBQXdDRCxJQUFJRSxnQkFBbEUsQ0FBVjtBQUNEOztBQUVEO0FBQ0EsTUFBSUosZUFBZSxDQUFuQixFQUFzQjtBQUNwQixRQUFNTSxNQUFNVCxNQUFNQyxNQUFNLENBQVosQ0FBWjtBQUNBRyxjQUFVTSxPQUFPRCxPQUFPLENBQWQsQ0FBVjtBQUNBTCxjQUFVTSxPQUFRRCxPQUFPLENBQVIsR0FBYSxJQUFwQixDQUFWO0FBQ0FMLGNBQVUsSUFBVjtBQUNELEdBTEQsTUFLTyxJQUFJRCxlQUFlLENBQW5CLEVBQXNCO0FBQzNCLFFBQU1NLE9BQU0sQ0FBQ1QsTUFBTUMsTUFBTSxDQUFaLEtBQWtCLENBQW5CLElBQXlCRCxNQUFNQyxNQUFNLENBQVosQ0FBckM7QUFDQUcsY0FBVU0sT0FBT0QsUUFBTyxFQUFkLENBQVY7QUFDQUwsY0FBVU0sT0FBUUQsUUFBTyxDQUFSLEdBQWEsSUFBcEIsQ0FBVjtBQUNBTCxjQUFVTSxPQUFRRCxRQUFPLENBQVIsR0FBYSxJQUFwQixDQUFWO0FBQ0FMLGNBQVUsR0FBVjtBQUNEOztBQUVELFNBQU9BLE1BQVA7QUFDRCxDOztBQXRDRCxJQUFNTSxTQUFTLG1FQUFtRUMsS0FBbkUsQ0FBeUUsRUFBekUsQ0FBZjtBQUNBLElBQU1KLG1CQUFtQixLQUF6QixDLENBQStCOztBQUUvQixJQUFNSyxrQkFBa0IsU0FBbEJBLGVBQWtCO0FBQUEsU0FBT0YsT0FBT0csT0FBTyxFQUFQLEdBQVksSUFBbkIsSUFBMkJILE9BQU9HLE9BQU8sRUFBUCxHQUFZLElBQW5CLENBQTNCLEdBQXNESCxPQUFPRyxPQUFPLENBQVAsR0FBVyxJQUFsQixDQUF0RCxHQUFnRkgsT0FBT0csTUFBTSxJQUFiLENBQXZGO0FBQUEsQ0FBeEI7O0FBRUEsU0FBU0wsV0FBVCxDQUFzQlIsS0FBdEIsRUFBNkJjLEtBQTdCLEVBQW9DQyxHQUFwQyxFQUF5QztBQUN2QyxNQUFJWCxTQUFTLEVBQWI7QUFDQSxPQUFLLElBQUlDLElBQUlTLEtBQWIsRUFBb0JULElBQUlVLEdBQXhCLEVBQTZCVixLQUFLLENBQWxDLEVBQXFDO0FBQ25DRCxjQUFVUSxnQkFBZ0IsQ0FBQ1osTUFBTUssQ0FBTixLQUFZLEVBQWIsS0FBb0JMLE1BQU1LLElBQUksQ0FBVixLQUFnQixDQUFwQyxJQUEwQ0wsTUFBTUssSUFBSSxDQUFWLENBQTFELENBQVY7QUFDRDtBQUNELFNBQU9ELE1BQVA7QUFDRCIsImZpbGUiOiJiYXNlNjQtZW5jb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTE9PS1VQID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLnNwbGl0KCcnKVxuY29uc3QgTUFYX0NIVU5LX0xFTkdUSCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG5jb25zdCB0cmlwbGV0VG9CYXNlNjQgPSBudW0gPT4gTE9PS1VQW251bSA+PiAxOCAmIDB4M0ZdICsgTE9PS1VQW251bSA+PiAxMiAmIDB4M0ZdICsgTE9PS1VQW251bSA+PiA2ICYgMHgzRl0gKyBMT09LVVBbbnVtICYgMHgzRl1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIGxldCBvdXRwdXQgPSAnJ1xuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIG91dHB1dCArPSB0cmlwbGV0VG9CYXNlNjQoKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh1aW50OCkge1xuICBjb25zdCBsZW4gPSB1aW50OC5sZW5ndGhcbiAgY29uc3QgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgbGV0IG91dHB1dCA9ICcnXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKGxldCBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IE1BWF9DSFVOS19MRU5HVEgpIHtcbiAgICBvdXRwdXQgKz0gZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgTUFYX0NIVU5LX0xFTkdUSCkgPiBsZW4yID8gbGVuMiA6IChpICsgTUFYX0NIVU5LX0xFTkdUSCkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgY29uc3QgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBvdXRwdXQgKz0gTE9PS1VQW3RtcCA+PiAyXVxuICAgIG91dHB1dCArPSBMT09LVVBbKHRtcCA8PCA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9PSdcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgY29uc3QgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgKHVpbnQ4W2xlbiAtIDFdKVxuICAgIG91dHB1dCArPSBMT09LVVBbdG1wID4+IDEwXVxuICAgIG91dHB1dCArPSBMT09LVVBbKHRtcCA+PiA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9IExPT0tVUFsodG1wIDw8IDIpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz0nXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG4iXX0=